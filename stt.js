const speech = require("@google-cloud/speech");
const { PassThrough } = require("stream");

class GoogleSTTStream {
  constructor(lang = "ru-RU") {
    this.client = new speech.SpeechClient();
    this.audioStream = new PassThrough();
    this.callbacks = [];
    this.isActive = false;
    this.bytesWritten = 0;
    this.lastActivity = Date.now();

    console.log(`üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google STT –¥–ª—è —è–∑—ã–∫–∞: ${lang}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Cloud
    this.client
      .getProjectId()
      .then((id) => {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Cloud –ø—Ä–æ–µ–∫—Ç—É:", id);
        this.startRecognition(lang);
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Cloud:", err);
      });
  }

  startRecognition(lang) {
    try {
      console.log("üéØ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...");

      this.recognizeStream = this.client
        .streamingRecognize({
          config: {
            encoding: "MULAW", // Œº-law encoding –æ—Ç Twilio
            sampleRateHertz: 8000, // 8kHz –æ—Ç Twilio
            languageCode: lang,
            enableAutomaticPunctuation: true,
            model: "telephony", // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            useEnhanced: true,
            enableWordTimeOffsets: true,
            enableWordConfidence: true,
            maxAlternatives: 1,
            profanityFilter: false,
            enableSpeakerDiarization: false,
          },
          interimResults: true, // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          singleUtterance: false, // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
        })
        .on("data", (data) => {
          // console.log("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Google STT:", {
          //   resultsLength: data.results?.length,
          //   hasResults: !!data.results?.[0],
          //   isFinal: data.results?.[0]?.isFinal,
          //   transcript: data.results?.[0]?.alternatives?.[0]?.transcript,
          //   confidence: data.results?.[0]?.alternatives?.[0]?.confidence,
          // });

          if (data.results?.[0]) {
            const result = data.results[0];
            const transcript = result.alternatives[0].transcript;

            if (result.isFinal) {
              console.log(
                `‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: "${transcript}" (confidence: ${result.alternatives[0].confidence})`
              );
              this.callbacks.forEach((cb) => cb(transcript));
            } else {
              // console.log(`üîÑ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç: "${transcript}"`);
            }
          }
        })
        .on("error", (err) => {
          console.error("‚ùå Google STT –æ—à–∏–±–∫–∞:", err);
          console.error("–ö–æ–¥ –æ—à–∏–±–∫–∏:", err.code);
          console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", err.details || err.message);

          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ STT...");
            this.restart(lang);
          }, 2000);
        })
        .on("end", () => {
          console.log("üèÅ Google STT —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω");
        });

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é
      this.audioStream.pipe(this.recognizeStream);
      this.isActive = true;
      console.log("‚úÖ Google STT –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      this.statsInterval = setInterval(() => {
        const timeSinceActivity = Date.now() - this.lastActivity;
        console.log(
          `üìä STT –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${this.bytesWritten} –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${timeSinceActivity}ms –Ω–∞–∑–∞–¥`
        );
      }, 10000);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", error);
    }
  }

  restart(lang) {
    if (this.recognizeStream) {
      this.recognizeStream.removeAllListeners();
      this.recognizeStream.destroy();
    }

    if (this.statsInterval) {
      clearInterval(this.statsInterval);
    }

    this.audioStream = new PassThrough();
    this.bytesWritten = 0;
    this.startRecognition(lang);
  }

  write(buffer) {
    if (!this.isActive || !this.audioStream) {
      console.warn("‚ö†Ô∏è STT –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ");
      return;
    }

    try {
      this.bytesWritten += buffer.length;
      this.lastActivity = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
      const nonZeroBytes = buffer.filter(
        (byte) => byte !== 255 && byte !== 127
      ).length;
      const audioActivity = (nonZeroBytes / buffer.length) * 100;

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 100-–π –±—É—Ñ–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      if (this.bytesWritten % (160 * 100) === 0) {
        console.log(
          `üéµ STT –ø–æ–ª—É—á–∏–ª ${
            this.bytesWritten
          } –±–∞–π—Ç, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: ${audioActivity.toFixed(1)}%`
        );
      }

      this.audioStream.write(buffer);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ:", error);
    }
  }

  onText(cb) {
    console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω callback –¥–ª—è —Ç–µ–∫—Å—Ç–∞");
    this.callbacks.push(cb);
  }

  close() {
    console.log("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ Google STT...");
    this.isActive = false;

    if (this.statsInterval) {
      clearInterval(this.statsInterval);
    }

    try {
      if (this.audioStream) {
        this.audioStream.end();
      }
      if (this.recognizeStream) {
        this.recognizeStream.removeAllListeners();
        this.recognizeStream.destroy();
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ STT:", error);
    }

    console.log(
      `‚úÖ Google STT –∑–∞–∫—Ä—ã—Ç (–≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.bytesWritten} –±–∞–π—Ç)`
    );
  }
}

module.exports = { GoogleSTTStream };
