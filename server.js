// server.js

const express = require("express");
const fs = require("fs");
const path = require("path");
const { WebSocketServer } = require("ws");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid");
const { transcribeAudio } = require("./stt");
const { generateReply } = require("./gpt");
const { synthesizeSpeech } = require("./tts");
require("dotenv").config();

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.json());
app.use(express.static("public"));

const playbacks = new Map();

app.get("/play/:filename", (req, res) => {
  const filePath = path.join(__dirname, "public/audio", req.params.filename);
  if (fs.existsSync(filePath)) {
    res.sendFile(filePath);
  } else {
    res.status(404).send("Not found");
  }
});

app.post("/api/webhooks/twiml", (req, res, next) => {
  req.url = "/twiml";
  next();
});

app.post("/twiml", (req, res) => {
  const callSid = req.body.CallSid;
  console.log(`üìû –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç CallSid: ${callSid}`);

  const response = `<?xml version="1.0" encoding="UTF-8"?>
  <Response>
    <Say voice="Polly.Tatyana">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞.</Say>
    <Redirect method="POST">${process.env.PUBLIC_HOST}/twiml-stream</Redirect>
  </Response>`;

  res.type("text/xml");
  res.send(response);
});

app.post("/twiml-stream", (req, res) => {
  const callSid = req.body.CallSid;
  const wsUrl = `${process.env.PUBLIC_WS}/media?sid=${callSid}`;
  console.log(`üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∏–º CallSid: ${callSid}`);

  const response = `<?xml version="1.0" encoding="UTF-8"?>
  <Response>
    <Connect>
      <Stream url="${wsUrl}" />
    </Connect>
  </Response>`;

  res.type("text/xml");
  res.send(response);
});

const wss = new WebSocketServer({ noServer: true });
wss.on("connection", (ws, req) => {
  console.log("‚ö° –ó–∞–ø—Ä–æ—Å –Ω–∞ WebSocket Upgrade:", req.url);

  let audioBuffer = [];
  let silenceFrames = 0;
  const silenceThreshold = 6; // ~300ms –µ—Å–ª–∏ 20fps

  const urlParams = new URLSearchParams(req.url.split("?")[1]);
  const callSid = urlParams.get("sid") || uuidv4();

  console.log("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –æ—Ç Twilio:", callSid);

  const processBufferedAudio = async () => {
    if (audioBuffer.length === 0) return;
    const audio = Buffer.concat(audioBuffer);
    audioBuffer = [];

    const text = await transcribeAudio(audio);
    if (!text) {
      console.warn("‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ç–µ–∫—Å—Ç–∞");
      return;
    }

    const reply = await generateReply(text);
    const mp3File = await synthesizeSpeech(reply);

    if (!mp3File) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ");
      return;
    }

    playbacks.set(callSid, mp3File);
    console.log(
      "‚úÖ –û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω. Twilio –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å /twiml-stream —Å–Ω–æ–≤–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."
    );
  };

  ws.on("message", async (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
      return;
    }

    if (msg.event === "media") {
      const payload = Buffer.from(msg.media.payload, "base64");
      audioBuffer.push(payload);

      const avg =
        payload.reduce((a, b) => a + Math.abs(b - 128), 0) / payload.length;
      console.log("AVG lvl -", avg);

      if (avg < 3) {
        silenceFrames++;
        if (silenceFrames > silenceThreshold) {
          console.log("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞...");
          silenceFrames = 0;
          await processBufferedAudio();
        }
      } else {
        silenceFrames = 0;
      }
    }
  });

  ws.on("error", (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", err);
  });
});

app.post("/call", async (req, res) => {
  const { to } = req.body;
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  const from = process.env.TWILIO_NUMBER;

  const client = require("twilio")(accountSid, authToken);

  try {
    const call = await client.calls.create({
      url: `${process.env.PUBLIC_HOST}/twiml`,
      to,
      from,
    });
    res.json({ success: true, sid: call.sid });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
server.on("upgrade", (req, socket, head) => {
  console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ upgrade:", req.url);
  if (req.url.startsWith("/media")) {
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit("connection", ws, req);
    });
  }
});
