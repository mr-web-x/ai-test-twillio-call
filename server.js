const express = require("express");
const { createServer } = require("http");
const { WebSocketServer } = require("ws");
const bodyParser = require("body-parser");
const { generateReply } = require("./gpt");
const { GoogleSTTStream } = require("./stt");
require("dotenv").config();

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.json());
app.use(express.static("public"));

const pendingCalls = new Map();
const activeCalls = new Map();
const startMessage =
  "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ–Ω–∫–∞. –Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ—Ç–¥–µ–ª –ø–æ –≤–∑—ã—Å–∫–∞–Ω–∏—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. –ú—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å —Å –≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å –≤–∞—à–µ–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. –≠—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Å —Ü–µ–ª—å—é —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å.";

// Endpoint –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
app.post("/call", async (req, res) => {
  const { to } = req.body;

  const client = require("twilio")(
    process.env.TWILIO_ACCOUNT_SID,
    process.env.TWILIO_AUTH_TOKEN
  );

  try {
    const call = await client.calls.create({
      url: `${process.env.PUBLIC_HOST}/api/webhooks/twiml`,
      to,
      from: process.env.TWILIO_NUMBER,
    });

    pendingCalls.set(call.sid, to);

    console.log(`üìû –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${call.sid} ‚Üí ${to}`);
    res.json({ success: true, sid: call.sid });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post("/api/webhooks/twiml", (req, res) => {
  const callSid = req.body.CallSid;
  const wsUrl = `${process.env.PUBLIC_WS}/media/${callSid}`;

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∏–º—É –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
  const response = `<?xml version="1.0" encoding="UTF-8"?>
  <Response>
    <Say voice="Polly.Tatyana">${startMessage}</Say>
    <Connect>
      <Stream url="${wsUrl}" />
    </Connect>
  </Response>`;

  res.type("text/xml");
  res.send(response);
});

// –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint /twiml-stream - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è XML
function escapeXml(text) {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}

const wss = new WebSocketServer({ noServer: true });

wss.on("connection", (ws, req) => {
  console.log("‚ö° –ó–∞–ø—Ä–æ—Å –Ω–∞ WebSocket Upgrade:", req.url);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º callSid –∏–∑ URL
  const callSid = req.url?.split("/").pop();

  console.log("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –æ—Ç Twilio:", callSid);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏)
  let callData = activeCalls.get(callSid);

  if (callData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º WebSocket –∏ STT, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    console.log(
      `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è ${callSid}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (${callData.dialog.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`
    );
    callData.ws = ws;
    if (callData.stt) {
      callData.stt.close();
    }
    callData.stt = new GoogleSTTStream("ru-RU");
    callData.isProcessing = false;
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
    const to = pendingCalls.get(callSid);
    const stt = new GoogleSTTStream("ru-RU");

    callData = {
      ws,
      stt,
      to,
      dialog: [{ from: "ai", text: startMessage }],
      isProcessing: false,
    };

    activeCalls.set(callSid, callData);
    pendingCalls.delete(callSid);
    console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è ${callSid}`);
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  callData.stt.onText(async (userText) => {
    const currentCallData = activeCalls.get(callSid);
    if (!currentCallData || currentCallData.isProcessing) return;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!userText || userText.trim() === "") {
      console.log(`üîá –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${callSid}`);
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    currentCallData.isProcessing = true;

    console.log(`üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (${callSid}): ${userText}`);
    currentCallData.dialog.push({ from: "client", text: userText });

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é GPT
      const reply = await generateReply(userText, currentCallData.dialog);
      console.log(`ü§ñ GPT –æ—Ç–≤–µ—Ç (${callSid}): ${reply}`);
      currentCallData.dialog.push({ from: "ai", text: reply });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio API
      const client = require("twilio")(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );

      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML
      const escapedReply = escapeXml(reply);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ Say –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∏–º—É
      const twimlResponse = `<?xml version="1.0" encoding="UTF-8"?>
      <Response>
        <Say language="ru-RU" voice="Polly.Tatyana">${escapedReply}</Say>
        <Pause length="2"/>
        <Connect>
          <Stream url="${process.env.PUBLIC_WS}/media/${callSid}" />
        </Connect>
      </Response>`;

      await client.calls(callSid).update({
        twiml: twimlResponse,
      });

      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∑–≤–æ–Ω–æ–∫: ${callSid}`);
      console.log(
        `üìä –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: ${currentCallData.dialog.length} —Å–æ–æ–±—â–µ–Ω–∏–π`
      );
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${callSid}:`, error);

      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç
      try {
        const client = require("twilio")(
          process.env.TWILIO_ACCOUNT_SID,
          process.env.TWILIO_AUTH_TOKEN
        );

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò —Ç—É—Ç —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∏–º—É
        const fallbackResponse = `<?xml version="1.0" encoding="UTF-8"?>
        <Response>
          <Say language="ru-RU" voice="Polly.Tatyana">–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.</Say>
          <Pause length="2"/>
          <Connect>
            <Stream url="${process.env.PUBLIC_WS}/media/${callSid}" />
          </Connect>
        </Response>`;

        await client.calls(callSid).update({
          twiml: fallbackResponse,
        });

        console.log(`üîÑ –ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${callSid}`);
      } catch (fallbackError) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${callSid}:`,
          fallbackError
        );
      }
    } finally {
      // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      currentCallData.isProcessing = false;
    }
  });

  ws.on("message", async (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
      return;
    }

    if (msg.event === "start") {
      console.log(`üé¨ –°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è –¥–ª—è ${callSid}:`, msg.start);
    } else if (msg.event === "media") {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Google STT
      const audioBuffer = Buffer.from(msg.media.payload, "base64");

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 50-–π —á–∞–Ω–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö
      if (parseInt(msg.media.chunk) % 50 === 0) {
        console.log(
          `üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ ${msg.media.chunk} –¥–ª—è ${callSid} (${audioBuffer.length} –±–∞–π—Ç)`
        );
      }

      const currentCallData = activeCalls.get(callSid);
      if (currentCallData && currentCallData.stt) {
        currentCallData.stt.write(audioBuffer);
      }
    } else if (msg.event === "stop") {
      console.log(`üõë –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${callSid}`);
    } else if (msg.event === "mark") {
      console.log(`üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω mark –¥–ª—è ${callSid}:`, msg.mark);
    }
  });

  ws.on("close", () => {
    console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${callSid}`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º STT
    const currentCallData = activeCalls.get(callSid);
    if (currentCallData && currentCallData.stt) {
      currentCallData.stt.close();
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    if (currentCallData) {
      console.log(`üìã –§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è ${callSid}:`);
      console.log(JSON.stringify(currentCallData.dialog, null, 2));
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    activeCalls.delete(callSid);
  });

  ws.on("error", (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ WebSocket –¥–ª—è ${callSid}:`, err);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ upgrade WebSocket
const server = createServer(app);
server.on("upgrade", (req, socket, head) => {
  if (req.url.startsWith("/media")) {
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit("connection", ws, req);
    });
  } else {
    socket.destroy();
  }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
app.get("/status", (req, res) => {
  const status = {
    activeCalls: activeCalls.size,
    pendingCalls: pendingCalls.size,
    calls: [],
  };

  for (const [callSid, data] of activeCalls) {
    status.calls.push({
      callSid,
      to: data.to,
      dialogLength: data.dialog ? data.dialog.length : 0,
      isProcessing: data.isProcessing || false,
    });
  }

  res.json(status);
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
app.get("/call/:callSid/dialog", (req, res) => {
  const { callSid } = req.params;
  const callData = activeCalls.get(callSid);

  if (!callData) {
    return res.status(404).json({ error: "–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  res.json({
    callSid,
    to: callData.to,
    dialog: callData.dialog,
    isProcessing: callData.isProcessing,
  });
});

// Graceful shutdown
process.on("SIGTERM", () => {
  console.log("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...");
  activeCalls.forEach(({ stt }, callSid) => {
    console.log(`üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º STT –¥–ª—è ${callSid}`);
    if (stt) {
      stt.close();
    }
  });
  server.close(() => {
    console.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    process.exit(0);
  });
});

process.on("SIGINT", () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
  process.emit("SIGTERM");
});

server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Status API: http://localhost:${PORT}/status`);
  console.log(`üìû Call API: POST http://localhost:${PORT}/call`);
});
