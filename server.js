const express = require("express");
const { createServer } = require("http");
const { WebSocketServer } = require("ws");
const bodyParser = require("body-parser");
const { generateReply } = require("./gpt");
const { GoogleSTTStream } = require("./stt");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config();

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.json());

// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
const activeCalls = new Map();

// Endpoint –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
app.post("/call", async (req, res) => {
  const { to } = req.body;

  const client = require("twilio")(
    process.env.TWILIO_ACCOUNT_SID,
    process.env.TWILIO_AUTH_TOKEN
  );

  try {
    const call = await client.calls.create({
      url: `${process.env.PUBLIC_HOST}/api/webhooks/twiml`,
      to,
      from: process.env.TWILIO_NUMBER,
    });

    console.log(`üìû –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${call.sid} ‚Üí ${to}`);
    res.json({ success: true, sid: call.sid });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post("/api/webhooks/twiml", (req, res) => {
  const response = `<?xml version="1.0" encoding="UTF-8"?>
  <Response>
    <Say voice="Polly.Tatyana">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞.</Say>
    <Redirect method="POST">${process.env.PUBLIC_HOST}/twiml-stream</Redirect>
  </Response>`;

  res.type("text/xml");
  res.send(response);
});

app.post("/twiml-stream", (req, res) => {
  const callSid = req.body.CallSid;
  const wsUrl = `${process.env.PUBLIC_WS}/media?sid=${callSid}`;
  console.log(`üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∏–º CallSid: ${callSid}`);

  const response = `<?xml version="1.0" encoding="UTF-8"?>
  <Response>
    <Connect>
      <Stream url="${wsUrl}" />
    </Connect>
  </Response>`;

  res.type("text/xml");
  res.send(response);
});

const wss = new WebSocketServer({ noServer: true });
wss.on("connection", (ws, req) => {
  console.log("‚ö° –ó–∞–ø—Ä–æ—Å –Ω–∞ WebSocket Upgrade:", req.url);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º callSid –∏–∑ URL
  const urlParams = new URLSearchParams(req.url.split("?")[1]);
  const callSid = urlParams.get("sid") || uuidv4();

  console.log("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –æ—Ç Twilio:", callSid);

  // –°–æ–∑–¥–∞–µ–º Google STT –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  const stt = new GoogleSTTStream("sk-SK");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
  activeCalls.set(callSid, { ws, stt });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  stt.onText(async (userText) => {
    console.log(`üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (${callSid}): ${userText}`);

    try {
      const reply = await generateReply(userText);
      console.log(`ü§ñ GPT –æ—Ç–≤–µ—Ç (${callSid}): ${reply}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio API
      const client = require("twilio")(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );

      await client.calls(callSid).update({
        twiml: `<Response><Say language="ru-RU" voice="Polly.Tatyana">${reply}</Say></Response>`,
      });

      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∑–≤–æ–Ω–æ–∫: ${callSid}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${callSid}:`, error);
    }
  });

  ws.on("message", async (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
      return;
    }

    if (msg.event === "start") {
      console.log(`üé¨ –°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è –¥–ª—è ${callSid}:`, msg.start);
    } else if (msg.event === "media") {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Google STT
      const audioBuffer = Buffer.from(msg.media.payload, "base64");

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 20-–π —á–∞–Ω–∫
      if (parseInt(msg.media.chunk) % 20 === 0) {
        console.log(
          `üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫ ${msg.media.chunk} –¥–ª—è ${callSid} (${audioBuffer.length} –±–∞–π—Ç)`
        );
      }

      stt.write(audioBuffer);
    } else if (msg.event === "stop") {
      console.log(`üõë –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${callSid}`);
    }
  });

  ws.on("close", () => {
    console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${callSid}`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º STT
    if (stt) {
      stt.close();
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    activeCalls.delete(callSid);
  });

  ws.on("error", (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ WebSocket –¥–ª—è ${callSid}:`, err);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ upgrade WebSocket
const server = createServer(app);
server.on("upgrade", (req, socket, head) => {
  if (req.url.startsWith("/media")) {
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit("connection", ws, req);
    });
  } else {
    socket.destroy();
  }
});

// Graceful shutdown
process.on("SIGTERM", () => {
  console.log("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...");
  activeCalls.forEach(({ stt }, callSid) => {
    console.log(`üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º STT –¥–ª—è ${callSid}`);
    stt.close();
  });
  server.close();
});

server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
