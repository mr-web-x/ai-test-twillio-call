const express = require("express");
const { WebSocketServer } = require("ws");
const { createServer } = require("http");
const bodyParser = require("body-parser");
const { generateReply, generateReplyWithStreaming } = require("./gpt");
require("dotenv").config();

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.json());
app.use(express.static("public"));

const borrower = {
  name: "Dmitry Novak",
  summCredit: 500,
  days: 30,
  prosrochka: 12,
  vernut: 512,
};

const pendingCalls = new Map();
const activeCalls = new Map();
const callTimeouts = new Map();
const silenceTimeouts = new Map(); // üéØ –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ–ª—á–∞–Ω–∏—è

const CALL_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
const SILENCE_TIMEOUT = 5 * 1000; // 5 —Å–µ–∫—É–Ω–¥—ã –º–æ–ª—á–∞–Ω–∏—è
const MAX_SILENCE_PROMPTS = 2; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∞

const startMessage =
  "Dobr√Ω de≈à, vol√°m sa Lenka. Zastupujem oddelenie vym√°hania pohƒæad√°vok. Pros√≠m, potvrƒète, ≈æe m√¥≈æete hovori≈•.";

// üéØ –§–†–ê–ó–´ –î–õ–Ø –ü–ï–†–ï–°–ü–†–û–°–ê –ü–†–ò –ú–û–õ–ß–ê–ù–ò–ò
const silencePrompts = [
  "Poƒçujem v√°s? M√¥≈æete odpoveda≈•?", // –ü–µ—Ä–≤—ã–π –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
  "Dmitry, ste tam? Pros√≠m, odpovedzte.", // –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
  "Zd√° sa, ≈æe sa spojenie preru≈°ilo. Ak ma poƒçujete, pros√≠m povedzte nieƒço.", // –¢—Ä–µ—Ç–∏–π –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
];

app.post("/call", async (req, res) => {
  const { to } = req.body;
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  const from = process.env.TWILIO_NUMBER;

  const client = require("twilio")(accountSid, authToken);

  try {
    const call = await client.calls.create({
      url: `${process.env.PUBLIC_HOST}/api/webhooks/twiml`,
      to,
      from,
    });

    pendingCalls.set(call.sid, to);

    console.log(`üìû –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${call.sid} ‚Üí ${to}`);
    res.json({ success: true, sid: call.sid });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post("/api/webhooks/twiml", (req, res) => {
  try {
    const callSid = req.body.CallSid;

    const to = pendingCalls.get(callSid);

    const callData = {
      to,
      dialog: [{ from: "ai", text: startMessage }],
      silenceCount: 0, // üéØ –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –º–æ–ª—á–∞–Ω–∏–∏
    };

    activeCalls.set(callSid, callData);
    pendingCalls.delete(callSid);
    console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è ${callSid}`);

    res.send(`<?xml version="1.0" encoding="UTF-8"?>
              <Response>
                  <Connect>
                      <ConversationRelay debug="True" url="${process.env.PUBLIC_WS}/conversation" transcriptionLanguage="sk-SK" transcriptionProvider="Deepgram" ttsProvider="google" voice="sk-SK-Wavenet-B" welcomeGreeting="${startMessage}">
                      </ConversationRelay>
                  </Connect>
              </Response>`);
  } catch (error) {
    console.log("ERROR -", error.message);
  }
});

app.post("/connect-action", (req, res) => {
  const VoiceResponse = require("twilio").twiml.VoiceResponse;

  const { CallSid, SessionStatus, SessionDuration, HandoffData } = req.body;
  console.log(
    `üîö –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ CallSid: ${CallSid}, Status: ${SessionStatus}, Duration: ${SessionDuration}s`
  );

  if (HandoffData) {
    console.log(`üìã HandoffData: ${HandoffData}`);
  }

  const response = new VoiceResponse();
  response.say(
    {
      voice: "Polly.Tatyana",
    },
    "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
  );
  response.hangup();

  res.type("text/xml");
  res.send(response.toString());
});

// üéØ –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –ó–ê–í–ò–°–®–ï–ì–û –ó–í–û–ù–ö–ê
function cleanupCall(callSid, reason = "timeout") {
  console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ ${callSid}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);

  if (activeCalls.has(callSid)) {
    activeCalls.delete(callSid);
    console.log(`üóëÔ∏è –ó–≤–æ–Ω–æ–∫ ${callSid} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
  }

  if (callTimeouts.has(callSid)) {
    const timeoutId = callTimeouts.get(callSid);
    clearTimeout(timeoutId);
    callTimeouts.delete(callSid);
    console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è ${callSid} –æ—á–∏—â–µ–Ω`);
  }

  // üéØ –û–ß–ò–©–ê–ï–ú –¢–ê–ô–ú–ê–£–¢ –ú–û–õ–ß–ê–ù–ò–Ø
  if (silenceTimeouts.has(callSid)) {
    const silenceTimeoutId = silenceTimeouts.get(callSid);
    clearTimeout(silenceTimeoutId);
    silenceTimeouts.delete(callSid);
    console.log(`ü§´ –¢–∞–π–º–∞—É—Ç –º–æ–ª—á–∞–Ω–∏—è –¥–ª—è ${callSid} –æ—á–∏—â–µ–Ω`);
  }

  if (pendingCalls.has(callSid)) {
    pendingCalls.delete(callSid);
  }
}

// üéØ –§–£–ù–ö–¶–ò–Ø –£–°–¢–ê–ù–û–í–ö–ò –¢–ê–ô–ú–ï–†–ê –ú–û–õ–ß–ê–ù–ò–Ø
function setSilenceTimer(callSid, ws, timeoutTime = SILENCE_TIMEOUT) {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –º–æ–ª—á–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
  if (silenceTimeouts.has(callSid)) {
    clearTimeout(silenceTimeouts.get(callSid));
  }

  const silenceTimeoutId = setTimeout(() => {
    console.log(`ü§´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–ª—á–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è ${callSid}`);

    const callData = activeCalls.get(callSid);
    if (!callData) {
      console.log(`‚ùå CallData –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${callSid}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º–æ–ª—á–∞–Ω–∏—è
    callData.silenceCount++;

    console.log(`üîÑ –ü–µ—Ä–µ—Å–ø—Ä–æ—Å #${callData.silenceCount} –¥–ª—è ${callSid}`);

    if (callData.silenceCount <= MAX_SILENCE_PROMPTS) {
      // –ë–µ—Ä–µ–º —Ñ—Ä–∞–∑—É –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∞
      const promptIndex = Math.min(
        callData.silenceCount - 1,
        silencePrompts.length - 1
      );
      const silencePrompt = silencePrompts[promptIndex];

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∏–∞–ª–æ–≥
      callData.dialog.push({ from: "ai", text: silencePrompt });

      console.log(`ü§ñ –ü–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º: "${silencePrompt}"`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
      if (ws.readyState === ws.OPEN) {
        ws.send(
          JSON.stringify({
            type: "text",
            token: silencePrompt,
            last: true,
          })
        );

        // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–û–í–´–ô –¢–ê–ô–ú–ï–† –ú–û–õ–ß–ê–ù–ò–Ø
        setSilenceTimer(callSid, ws);
      }
    } else {
      // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–æ–≤ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
      console.log(
        `‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${callSid} - –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫`
      );

      const goodbyeMessage =
        "Zd√° sa, ≈æe sa spojenie preru≈°ilo. ƒéakujem za v√°≈° ƒças. Dovidenia!";
      callData.dialog.push({ from: "ai", text: goodbyeMessage });

      if (ws.readyState === ws.OPEN) {
        ws.send(
          JSON.stringify({
            type: "text",
            token: goodbyeMessage,
            last: true,
          })
        );

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (ws.readyState === ws.OPEN) {
            ws.send(
              JSON.stringify({
                type: "end",
                handoffData: JSON.stringify({
                  reason: "client_silence_timeout",
                  timestamp: new Date().toISOString(),
                  silenceCount: callData.silenceCount,
                  finalDialog: callData.dialog,
                }),
              })
            );
          }
        }, 3000);
      }

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      cleanupCall(callSid, "silence_timeout");
    }
  }, timeoutTime);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞ –º–æ–ª—á–∞–Ω–∏—è
  silenceTimeouts.set(callSid, silenceTimeoutId);
  console.log(
    `ü§´ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –º–æ–ª—á–∞–Ω–∏—è ${timeoutTime / 1000}—Å–µ–∫ –¥–ª—è ${callSid}`
  );
}

const wss = new WebSocketServer({ noServer: true });

wss.on("connection", (ws, req) => {
  console.log("üîå ConversationRelay WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");

  let currentCallSid = null;
  let conversationEnded = false;

  ws.on("message", async (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
      // console.log("[MESSAGE] -", msg);
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
      return;
    }

    switch (msg.type) {
      case "setup":
        console.log(
          `üöÄ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: ${msg.sessionId}, CallSid: ${msg.callSid}`
        );

        currentCallSid = msg.callSid;

        // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –û–°–ù–û–í–ù–û–ô –¢–ê–ô–ú–ê–£–¢
        const timeoutId = setTimeout(() => {
          console.log(
            `‚è∞ –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫ –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${currentCallSid} - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º`
          );

          if (ws.readyState === ws.OPEN) {
            console.log(
              `üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –¥–ª—è ${currentCallSid}`
            );
            ws.close(1000, "Call timeout exceeded");
          }

          cleanupCall(currentCallSid, "timeout_exceeded");
        }, CALL_TIMEOUT);

        callTimeouts.set(currentCallSid, timeoutId);
        console.log(
          `‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç ${
            CALL_TIMEOUT / 1000 / 60
          } –º–∏–Ω—É—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞ ${currentCallSid}`
        );

        ws.send(
          JSON.stringify({
            type: "language",
            ttsLanguage: "sk-SK",
            transcriptionLanguage: "sk-SK",
          })
        );

        setSilenceTimer(currentCallSid, ws, 18);

        break;

      case "prompt":
        if (conversationEnded) {
          console.log(
            "‚ö†Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
          );
          return;
        }

        const userText = msg.voicePrompt;
        const language = msg.lang;
        const isComplete = msg.last;

        const currentCallData = activeCalls.get(currentCallSid);

        if (!currentCallData) {
          console.error(`‚ùå CallData –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${currentCallSid}`);
          return;
        }

        // üéØ –ö–õ–ò–ï–ù–¢ –û–¢–í–ï–¢–ò–õ - –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –ú–û–õ–ß–ê–ù–ò–Ø
        if (silenceTimeouts.has(currentCallSid)) {
          clearTimeout(silenceTimeouts.get(currentCallSid));
          silenceTimeouts.delete(currentCallSid);
          console.log(
            `üó£Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –º–æ–ª—á–∞–Ω–∏—è –¥–ª—è ${currentCallSid}`
          );
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º–æ–ª—á–∞–Ω–∏—è –ø—Ä–∏ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞
        currentCallData.silenceCount = 0;

        currentCallData.dialog.push({ from: "client", text: userText });

        console.log(
          `[${new Date().toISOString()}] üó£Ô∏è –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª (${language}): "${userText}"`
        );

        if (isComplete) {
          try {
            // üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú STREAMING –í–ï–†–°–ò–Æ –í–ú–ï–°–¢–û –û–ë–´–ß–ù–û–ô
            console.log("üé¨ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ streaming –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...");

            const result = await generateReplyWithStreaming(
              userText,
              currentCallData.dialog,
              borrower,
              ws // –ü–µ—Ä–µ–¥–∞–µ–º WebSocket –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–æ–≤
            );

            const reply = result.reply;
            const shouldEndCall = result.shouldEndCall;

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
            currentCallData.dialog.push({ from: "ai", text: reply });

            console.log(
              `[${new Date().toISOString()}] ü§ñ –ê–ò —Å–∫–∞–∑–∞–ª (streaming): "${reply}"`
            );

            if (!shouldEndCall) {
              console.log(
                "ü§´ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –º–æ–ª—á–∞–Ω–∏—è –ø–æ—Å–ª–µ streaming –æ—Ç–≤–µ—Ç–∞"
              );
              setSilenceTimer(currentCallSid, ws);
            }

            if (shouldEndCall) {
              console.log("üèÅ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...");

              conversationEnded = true;
              cleanupCall(currentCallSid, "normal_completion");

              setTimeout(() => {
                if (ws.readyState === ws.OPEN) {
                  ws.send(
                    JSON.stringify({
                      type: "end",
                      handoffData: JSON.stringify({
                        reason: "conversation_completed",
                        timestamp: new Date().toISOString(),
                        finalDialog: currentCallData.dialog,
                      }),
                    })
                  );
                }
              }, 3000);
            }

            // üéØ –í–†–ï–ú–ï–ù–ù–û –ù–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–ê–ô–ú–ï–† –ú–û–õ–ß–ê–ù–ò–Ø
            // setSilenceTimer(currentCallSid, ws);
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ streaming –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            const errorMessage =
              "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";

            ws.send(
              JSON.stringify({
                type: "text",
                token: errorMessage,
                last: true,
              })
            );

            // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –º–æ–ª—á–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
          }
        }
        break;

      case "dtmf":
        if (conversationEnded) {
          console.log("‚ö†Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º DTMF");
          return;
        }

        console.log(`üì± DTMF: ${msg.digit}`);

        if (msg.digit === "0") {
          conversationEnded = true;
          cleanupCall(currentCallSid, "dtmf_transfer");

          ws.send(
            JSON.stringify({
              type: "text",
              token: "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
              last: true,
            })
          );

          setTimeout(() => {
            if (ws.readyState === ws.OPEN) {
              ws.send(
                JSON.stringify({
                  type: "end",
                  handoffData: JSON.stringify({
                    reason: "operator_request",
                    timestamp: new Date().toISOString(),
                  }),
                })
              );
            }
          }, 2000);
        }
        break;

      case "interrupt":
        console.log(
          `üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞: "${msg.utteranceUntilInterrupt}" —á–µ—Ä–µ–∑ ${msg.durationUntilInterruptMs}ms`
        );
        break;

      case "error":
        console.error(`‚ùå –û—à–∏–±–∫–∞ ConversationRelay: ${msg.description}`);
        break;

      default:
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.type}`);
    }
  });

  ws.on("error", (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket ConversationRelay:", err);

    if (currentCallSid) {
      cleanupCall(currentCallSid, "websocket_error");
    }
  });

  ws.on("close", (code, reason) => {
    console.log(
      `üîå ConversationRelay WebSocket –∑–∞–∫—Ä—ã—Ç. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
    );

    const callData = activeCalls.get(currentCallSid);

    if (callData && !conversationEnded) {
      console.log(
        "–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥:",
        JSON.stringify(callData.dialog, null, 2)
      );
    }

    if (currentCallSid) {
      cleanupCall(currentCallSid, "websocket_closed");
    }
  });
});

// üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£
setInterval(() => {
  const now = Date.now();
  const activeCallsCount = activeCalls.size;
  const timeoutsCount = callTimeouts.size;
  const silenceTimeoutsCount = silenceTimeouts.size;

  console.log(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ó–≤–æ–Ω–∫–∏: ${activeCallsCount}, –¢–∞–π–º–∞—É—Ç—ã: ${timeoutsCount}, –ú–æ–ª—á–∞–Ω–∏–µ: ${silenceTimeoutsCount}`
  );

  if (activeCallsCount !== timeoutsCount) {
    console.warn(
      `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç–∞–π–º–∞—É—Ç–∞—Ö: ${activeCallsCount} vs ${timeoutsCount}`
    );
  }
}, 60000);

const server = createServer(app);

server.on("upgrade", (req, socket, head) => {
  console.log("üîÑ WebSocket upgrade –∑–∞–ø—Ä–æ—Å:", req.url);

  if (req.url.startsWith("/conversation")) {
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit("connection", ws, req);
    });
  } else {
    socket.destroy();
  }
});

server.listen(PORT, () => {
  console.log(`üöÄ Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket endpoint: ${process.env.PUBLIC_WS}/conversation`);
  console.log(`üåê HTTP endpoint: ${process.env.PUBLIC_HOST}`);
});

process.on("SIGINT", () => {
  console.log("\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT. –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã...");

  for (const [callSid, timeoutId] of callTimeouts) {
    clearTimeout(timeoutId);
  }

  for (const [callSid, silenceTimeoutId] of silenceTimeouts) {
    clearTimeout(silenceTimeoutId);
  }

  callTimeouts.clear();
  silenceTimeouts.clear();
  activeCalls.clear();
  pendingCalls.clear();

  console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...");
  process.exit(0);
});
