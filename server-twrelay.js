const express = require("express");
const { WebSocketServer } = require("ws");
const { createServer } = require("http");
const bodyParser = require("body-parser");
const { generateReply } = require("./gpt");
require("dotenv").config();

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.json());
app.use(express.static("public"));

const pendingCalls = new Map();
const activeCalls = new Map();
const startMessage =
  "Dobr√Ω de≈à, vol√°m sa Lenka. Zastupujem oddelenie vym√°hania pohƒæad√°vok. Radi by sme s vami prediskutovali ot√°zku va≈°ej neuhradenej dl≈æoby. Tento hovor bude zaznamen√°van√Ω za √∫ƒçelom zlep≈°enia kvality slu≈æieb. Pros√≠m, potvrƒète, ≈æe m√¥≈æete hovori≈•.";

app.post("/call", async (req, res) => {
  const { to } = req.body;
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  const from = process.env.TWILIO_NUMBER;

  const client = require("twilio")(accountSid, authToken);

  try {
    const call = await client.calls.create({
      url: `${process.env.PUBLIC_HOST}/api/webhooks/twiml`,
      to,
      from,
    });

    pendingCalls.set(call.sid, to);

    console.log(`üìû –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${call.sid} ‚Üí ${to}`);
    res.json({ success: true, sid: call.sid });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post("/api/webhooks/twiml", (req, res) => {
  try {
    const callSid = req.body.CallSid;

    const to = pendingCalls.get(callSid);

    const callData = {
      to,
      dialog: [{ from: "ai", text: startMessage }],
    };

    activeCalls.set(callSid, callData);
    pendingCalls.delete(callSid);
    console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è ${callSid}`);

    res.send(`<?xml version="1.0" encoding="UTF-8"?>
              <Response>
                  <Connect>
                      <ConversationRelay url="${process.env.PUBLIC_WS}/conversation" transcriptionLanguage="sk-SK" transcriptionProvider="Deepgram" ttsProvider="google" voice="sk-SK-Wavenet-B" welcomeGreeting="${startMessage}">
                      </ConversationRelay>
                  </Connect>
              </Response>`);
  } catch (error) {
    console.log("ERROR -", error.message);
  }
});

// Action callback –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ConversationRelay
app.post("/connect-action", (req, res) => {
  const VoiceResponse = require("twilio").twiml.VoiceResponse;

  const { CallSid, SessionStatus, SessionDuration, HandoffData } = req.body;
  console.log(
    `üîö –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ CallSid: ${CallSid}, Status: ${SessionStatus}, Duration: ${SessionDuration}s`
  );

  if (HandoffData) {
    console.log(`üìã HandoffData: ${HandoffData}`);
  }

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ SDK
  const response = new VoiceResponse();
  response.say(
    {
      voice: "Polly.Tatyana",
    },
    "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
  );
  response.hangup();

  res.type("text/xml");
  res.send(response.toString());
});

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è ConversationRelay
const wss = new WebSocketServer({ noServer: true });

wss.on("connection", (ws, req) => {
  console.log("üîå ConversationRelay WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");

  let currentCallSid = null;

  ws.on("message", async (data) => {
    let msg;
    try {
      msg = JSON.parse(data);
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
      return;
    }

    // console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ConversationRelay
    switch (msg.type) {
      case "setup":
        console.log(
          `üöÄ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: ${msg.sessionId}, CallSid: ${msg.callSid}`
        );

        currentCallSid = msg.callSid;

        ws.send(
          JSON.stringify({
            type: "language",
            ttsLanguage: "sk-SK",
            transcriptionLanguage: "sk-SK",
          })
        );

        // ws.send(
        //   JSON.stringify({
        //     type: "text",
        //     token: startMessage,
        //     last: true,
        //   })
        // );

        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (msg.customParameters) {
          console.log("üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", msg.customParameters);
        }
        break;

      case "prompt":
        // –ö–ª–∏–µ–Ω—Ç —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª - –ø–æ–ª—É—á–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        const userText = msg.voicePrompt;
        const language = msg.lang;
        const isComplete = msg.last;

        const currentCallData = activeCalls.get(currentCallSid);

        if (!currentCallData) {
          console.error(`‚ùå CallData –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${currentCallSid}`);
          return;
        }

        currentCallData.dialog.push({ from: "client", text: userText });

        console.log(
          `[${new Date().toISOString()}] üó£Ô∏è –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª (${language}): "${userText}"`
        );

        if (isComplete) {
          try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
            const reply = await generateReply(userText, currentCallData.dialog);
            currentCallData.dialog.push({ from: "ai", text: reply });

            console.log(
              `[${new Date().toISOString()}] ü§ñ –ê–ò —Å–∫–∞–∑–∞–ª: "${reply}"`
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ConversationRelay
            ws.send(
              JSON.stringify({
                type: "text",
                token: reply,
                last: true,
              })
            );
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            ws.send(
              JSON.stringify({
                type: "text",
                token: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                last: true,
              })
            );
          }
        }
        break;

      case "dtmf":
        // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
        console.log(`üì± DTMF: ${msg.digit}`);

        // –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º)
        if (msg.digit === "0") {
          ws.send(
            JSON.stringify({
              type: "text",
              token: "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
              last: true,
            })
          );

          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
          setTimeout(() => {
            ws.send(
              JSON.stringify({
                type: "end",
                handoffData: JSON.stringify({
                  reason: "operator_request",
                  timestamp: new Date().toISOString(),
                }),
              })
            );
          }, 2000);
        }
        break;

      case "interrupt":
        // –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ—Ä–≤–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        console.log(
          `üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞: "${msg.utteranceUntilInterrupt}" —á–µ—Ä–µ–∑ ${msg.durationUntilInterruptMs}ms`
        );
        break;

      case "error":
        // –û—à–∏–±–∫–∞ –æ—Ç ConversationRelay
        console.error(`‚ùå –û—à–∏–±–∫–∞ ConversationRelay: ${msg.description}`);
        break;

      default:
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.type}`);
    }
  });

  ws.on("error", (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket ConversationRelay:", err);
  });

  ws.on("close", () => {
    const callData = activeCalls.get(currentCallSid);

    if (callData) {
      console.log(
        "–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥:",
        JSON.stringify(callData.dialog, null, 2)
      );
      // –ó–¥–µ—Å—å –≤–∞—à –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      activeCalls.delete(currentCallSid); // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    }

    console.log("üîå ConversationRelay WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
  });
});

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = createServer(app);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket upgrade –¥–ª—è ConversationRelay
server.on("upgrade", (req, socket, head) => {
  console.log("üîÑ WebSocket upgrade –∑–∞–ø—Ä–æ—Å:", req.url);

  if (req.url.startsWith("/conversation")) {
    wss.handleUpgrade(req, socket, head, (ws) => {
      wss.emit("connection", ws, req);
    });
  } else {
    socket.destroy();
  }
});

server.listen(PORT, () => {
  console.log(`üöÄ Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket endpoint: ${process.env.PUBLIC_WS}/conversation`);
  console.log(`üåê HTTP endpoint: ${process.env.PUBLIC_HOST}`);
});
